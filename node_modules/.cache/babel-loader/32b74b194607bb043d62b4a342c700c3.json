{"ast":null,"code":"import { DELETE_USER_CRM, GET_UPDATE_USER_CRM, GET_USER_BYID_CRM, GET_USER_CRM, SEARCH_USER_CRM, STATUS_CREATE_USER, STATUS_UPDATE_USER, STATUS_UPLOAD_USER, UPDATE_CONTACT } from \"./valiable.reducer\";\nconst initialState = {\n  dataUserUpdate: {},\n  dataUsers: [],\n  dataUserById: undefined,\n  statusCode: 0,\n  statusCodeCreate: 0,\n  statusCodeUpload: 0\n};\nexport const userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_UPDATE_USER_CRM:\n      {\n        state.dataUserUpdate = action.datas;\n        return { ...state\n        };\n      }\n\n    case STATUS_UPDATE_USER:\n      {\n        state.statusCode = action.data;\n        return { ...state\n        };\n      }\n\n    case STATUS_CREATE_USER:\n      {\n        state.statusCodeCreate = action.data;\n        return { ...state\n        };\n      }\n\n    case STATUS_UPLOAD_USER:\n      {\n        state.statusCodeUpload = action.data;\n        return { ...state\n        };\n      }\n\n    case UPDATE_CONTACT:\n      {\n        state.dataUserById = JSON.parse(action.data);\n        return { ...state\n        };\n      }\n\n    case GET_USER_BYID_CRM:\n      {\n        state.dataUserById = action.data;\n        return { ...state\n        };\n      }\n\n    case GET_USER_CRM:\n      {\n        state.dataUsers = action.datas;\n        return { ...state\n        };\n      }\n\n    case DELETE_USER_CRM:\n      {\n        let update = [...state.dataUsers];\n        let index = update.findIndex(items => items._id === action.id);\n\n        if (index !== -1) {\n          update.splice(index, 1);\n          state.dataUserById = undefined;\n          state.dataUsers = update;\n        }\n\n        return { ...state\n        };\n      }\n\n    case SEARCH_USER_CRM:\n      {\n        let clonetArray = [...state.dataUsers];\n        clonetArray = clonetArray.filter(items => items.name.toLowerCase().match(action.datas.toLowerCase()));\n        state.dataUsers = clonetArray;\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/atat-dev/Desktop/VS_CODE/Project _CyberSoft/Mini-Project_CRM/Mini-Project-CRM-FE/src/reducer/user.reducer.js"],"names":["DELETE_USER_CRM","GET_UPDATE_USER_CRM","GET_USER_BYID_CRM","GET_USER_CRM","SEARCH_USER_CRM","STATUS_CREATE_USER","STATUS_UPDATE_USER","STATUS_UPLOAD_USER","UPDATE_CONTACT","initialState","dataUserUpdate","dataUsers","dataUserById","undefined","statusCode","statusCodeCreate","statusCodeUpload","userReducer","state","action","type","datas","data","JSON","parse","update","index","findIndex","items","_id","id","splice","clonetArray","filter","name","toLowerCase","match"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,mBAA1B,EAA+CC,iBAA/C,EAAkEC,YAAlE,EAAgFC,eAAhF,EAAiGC,kBAAjG,EAAqHC,kBAArH,EAAyIC,kBAAzI,EAA6JC,cAA7J,QAAmL,oBAAnL;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,EADC;AAEjBC,EAAAA,SAAS,EAAE,EAFM;AAGjBC,EAAAA,YAAY,EAAEC,SAHG;AAIjBC,EAAAA,UAAU,EAAE,CAJK;AAKjBC,EAAAA,gBAAgB,EAAE,CALD;AAMjBC,EAAAA,gBAAgB,EAAE;AAND,CAArB;AASA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACzD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKnB,mBAAL;AAA0B;AACtBiB,QAAAA,KAAK,CAACR,cAAN,GAAuBS,MAAM,CAACE,KAA9B;AACA,eAAO,EAAE,GAAGH;AAAL,SAAP;AACH;;AACD,SAAKZ,kBAAL;AAAyB;AACrBY,QAAAA,KAAK,CAACJ,UAAN,GAAmBK,MAAM,CAACG,IAA1B;AACA,eAAO,EAAE,GAAGJ;AAAL,SAAP;AACH;;AACD,SAAKb,kBAAL;AAAyB;AACrBa,QAAAA,KAAK,CAACH,gBAAN,GAAyBI,MAAM,CAACG,IAAhC;AACA,eAAO,EAAE,GAAGJ;AAAL,SAAP;AACH;;AACD,SAAKX,kBAAL;AAAyB;AACrBW,QAAAA,KAAK,CAACF,gBAAN,GAAyBG,MAAM,CAACG,IAAhC;AACA,eAAO,EAAE,GAAGJ;AAAL,SAAP;AACH;;AACD,SAAKV,cAAL;AAAqB;AACjBU,QAAAA,KAAK,CAACN,YAAN,GAAqBW,IAAI,CAACC,KAAL,CAAWL,MAAM,CAACG,IAAlB,CAArB;AACA,eAAO,EAAE,GAAGJ;AAAL,SAAP;AACH;;AACD,SAAKhB,iBAAL;AAAwB;AACpBgB,QAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAACG,IAA5B;AACA,eAAO,EAAE,GAAGJ;AAAL,SAAP;AACH;;AACD,SAAKf,YAAL;AAAmB;AACfe,QAAAA,KAAK,CAACP,SAAN,GAAkBQ,MAAM,CAACE,KAAzB;AACA,eAAO,EAAE,GAAGH;AAAL,SAAP;AACH;;AACD,SAAKlB,eAAL;AAAsB;AAClB,YAAIyB,MAAM,GAAG,CAAC,GAAGP,KAAK,CAACP,SAAV,CAAb;AACA,YAAIe,KAAK,GAAGD,MAAM,CAACE,SAAP,CAAiBC,KAAK,IAAIA,KAAK,CAACC,GAAN,KAAcV,MAAM,CAACW,EAA/C,CAAZ;;AACA,YAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,UAAAA,MAAM,CAACM,MAAP,CAAcL,KAAd,EAAqB,CAArB;AACAR,UAAAA,KAAK,CAACN,YAAN,GAAqBC,SAArB;AACAK,UAAAA,KAAK,CAACP,SAAN,GAAkBc,MAAlB;AACH;;AACD,eAAO,EAAE,GAAGP;AAAL,SAAP;AACH;;AACD,SAAKd,eAAL;AAAsB;AAClB,YAAI4B,WAAW,GAAG,CAAC,GAAGd,KAAK,CAACP,SAAV,CAAlB;AACAqB,QAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBL,KAAK,IAAIA,KAAK,CAACM,IAAN,CAAWC,WAAX,GAAyBC,KAAzB,CAA+BjB,MAAM,CAACE,KAAP,CAAac,WAAb,EAA/B,CAA5B,CAAd;AACAjB,QAAAA,KAAK,CAACP,SAAN,GAAkBqB,WAAlB;AACA,eAAO,EAAE,GAAGd;AAAL,SAAP;AACH;;AACD;AACI,aAAOA,KAAP;AA9CR;AAgDH,CAjDM","sourcesContent":["import { DELETE_USER_CRM, GET_UPDATE_USER_CRM, GET_USER_BYID_CRM, GET_USER_CRM, SEARCH_USER_CRM, STATUS_CREATE_USER, STATUS_UPDATE_USER, STATUS_UPLOAD_USER, UPDATE_CONTACT } from \"./valiable.reducer\";\n\nconst initialState = {\n    dataUserUpdate: {},\n    dataUsers: [],\n    dataUserById: undefined,\n    statusCode: 0,\n    statusCodeCreate: 0,\n    statusCodeUpload: 0,\n}\n\nexport const userReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_UPDATE_USER_CRM: {\n            state.dataUserUpdate = action.datas;\n            return { ...state }\n        }\n        case STATUS_UPDATE_USER: {\n            state.statusCode = action.data;\n            return { ...state }\n        }\n        case STATUS_CREATE_USER: {\n            state.statusCodeCreate = action.data;\n            return { ...state }\n        }\n        case STATUS_UPLOAD_USER: {\n            state.statusCodeUpload = action.data;\n            return { ...state }\n        }\n        case UPDATE_CONTACT: {\n            state.dataUserById = JSON.parse(action.data)\n            return { ...state }\n        }\n        case GET_USER_BYID_CRM: {\n            state.dataUserById = action.data;\n            return { ...state }\n        }\n        case GET_USER_CRM: {\n            state.dataUsers = action.datas;\n            return { ...state }\n        }\n        case DELETE_USER_CRM: {\n            let update = [...state.dataUsers];\n            let index = update.findIndex(items => items._id === action.id);\n            if (index !== -1) {\n                update.splice(index, 1);\n                state.dataUserById = undefined\n                state.dataUsers = update\n            }\n            return { ...state }\n        }\n        case SEARCH_USER_CRM: {\n            let clonetArray = [...state.dataUsers]\n            clonetArray = clonetArray.filter(items => items.name.toLowerCase().match(action.datas.toLowerCase()))\n            state.dataUsers = clonetArray\n            return { ...state }\n        }\n        default:\n            return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}